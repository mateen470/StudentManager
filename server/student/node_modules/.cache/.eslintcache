[{"C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\index.js":"1","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\App.js":"2","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Add.js":"3","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Update.js":"4","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\View.js":"5","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Head.js":"6","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Home.js":"7"},{"size":342,"mtime":1653204552025,"results":"8","hashOfConfig":"9"},{"size":982,"mtime":1653205070659,"results":"10","hashOfConfig":"9"},{"size":5264,"mtime":1653214333456,"results":"11","hashOfConfig":"9"},{"size":5915,"mtime":1653204815314,"results":"12","hashOfConfig":"9"},{"size":3306,"mtime":1653204795312,"results":"13","hashOfConfig":"9"},{"size":262,"mtime":1653204757516,"results":"14","hashOfConfig":"9"},{"size":4223,"mtime":1653204775820,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12rr212",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\index.js",[],[],"C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\App.js",["40"],[],"\n// THIS IS THE PAGE WHICH IS COMBING ALL THE COMPONENTS OF THE API\nimport { Routes, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport \"./App.css\";\n// HERE I IMPORTED BOOTSTRAP FROM NODE MODULES BECAUSE I INSTALLED BOOTSTRAP\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js\";\n// ALWAYS START THE NAME OF THE CUSTOM FILE YOU ARE IMPORTING WITH CAPITAL LETTER\nimport {Head} from \"./components/Head\";\nimport {Home} from \"./components/Home\";\nimport {Add} from \"./components/Add\";\nimport {Update} from \"./components/Update\";\nimport {View} from \"./components/View\";\n\n\nfunction App() {\n  return (\n    <>\n      <Head />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/add\" element={<Add />} />\n        <Route path=\"/update/:id\" element={<Update />} />\n        <Route path=\"/view/:id\" element={<View />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Add.js",[],[],"C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Update.js",["41"],[],"// THIS REGISTERATION PAGE OF A NEW STUDENT\r\nimport { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\n\r\nimport { NavLink, useParams, useNavigate } from \"react-router-dom\";\r\n\r\nexport const Update = () => {\r\n  // THIS useNavigate HOOK IS USED WHEN YOU WILL CLICK ON SUBMIT BUTTON, THE PAGE WILL GO BACK TO\r\n  // WHEREEVER YOU PUT ADDRESS IN THIS HOOK TO\r\n  const goBack = useNavigate();\r\n\r\n  // USING STATE HOOK FOR THE VALUES OF THE INPUT VARIABLES\r\n  const [val, setINP] = useState({\r\n    name: \"\",\r\n    id: \"\",\r\n    department: \"\",\r\n    semester: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  // setData FUNCTION TO GET THE VALUES WHIHC WILL BE PROVIDED BY USER\r\n  const setData = (e) => {\r\n    const { name, value } = e.target;\r\n    setINP((preVal) => {\r\n      return {\r\n        ...preVal,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n  let { id } = useParams(\"\");\r\n\r\n  // THIS FUNCTION WILL VALIDATE AND THEN STORE THE WHOLE DATA AGAINST THE ID IN setINP RATHER THAN getUser AS IN ADD PAGE\r\n  // BECAUSE WE WANT TO SHOW THE DATA IN THE FORM WHICH IS ALREADY EXISTING AND SETINP\r\n  // ALREADY HAS THAT PREVIOUS DATA STORED\r\n  const Update = async () => {\r\n    const res = await fetch(`http://localhost:3000/view/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    // STORING THE DATA WHICH IS SENT BY THE SERVER IN JSON FORMAT IN data\r\n    const data = await res.json();\r\n    console.log(data);\r\n\r\n    if (res.status === 422 || !data) {\r\n      console.log(\"ERROR\");\r\n    } else {\r\n      // THE setUser IS THE VARIABLE DEFINED IN USESTATE TO UPDATE OR STORE THE NEW VALUE, data IS BEING TO THE setUser\r\n      setINP(data);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    Update();\r\n  }, []);\r\n\r\n  // THIS FUNCTION IS AN ONCLICK FUNCTION OF UPDATE BUTTON AND IT WILL UPDATE THE RECORD AND IT ALSO SPECIFIES THE\r\n  // DATA BASED ON THE ID AND HOW IT WORKS IS THAT THE SERVER WILL GET THE ID FROM HOME PAGE AND THE  THE SERVER\r\n  // WILL FIND THE WHILE DATA AGAINST THAT ID AND THEN SEND THE WHOLE DATA TO THIS FUNCTION\r\n  const updateUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, id, department, semester, email } = val;\r\n    \r\n    const res2 = await fetch(`http://localhost:3000/update/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        id,\r\n        department,\r\n        semester,\r\n        email,\r\n      }),\r\n    });\r\n\r\n    const data2 = await res2.json();\r\n\r\n    if (res2.status === 422 || !data2) {\r\n      alert(\"ERROR\");\r\n    } else {\r\n      alert(\"DATA UPDATED SUCCESSFULLY!\");\r\n      goBack(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mb-2\" id=\"main\">\r\n        <div>\r\n          <NavLink className=\"newUser\" to=\"/\">\r\n            <span>\r\n              <i className=\"fas fa-angle-double-left\" aria-hidden=\"true\"></i>\r\n              All Users<i className=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n            </span>\r\n          </NavLink>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <h2 className=\"addText\">Update User</h2>\r\n          <span className=\"fs-5\">\r\n            fill the form below to update the student\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <form>\r\n        <div className=\"input form-group bg-dark d-inline-block text-white mt-4\">\r\n          <div className=\"second\">\r\n            <div className=\"m-2 fs-5\">\r\n              <label htmlFor=\"name\">\r\n                NAME :\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"Name\"\r\n                  className=\"text\"\r\n                  placeholder=\"Abdul Mateen\"\r\n                  name=\"name\"\r\n                  value={val.name}\r\n                  onChange={setData}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"m-2 fs-5\">\r\n              <label htmlFor=\"id\">\r\n                ID :\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"id\"\r\n                  className=\"text\"\r\n                  placeholder=\"FA19-BCS-022\"\r\n                  name=\"id\"\r\n                  value={val.id}\r\n                  onChange={setData}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"m-2 fs-5\">\r\n              <label htmlFor=\"dep\">\r\n                DEPARTMENT :\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"dep\"\r\n                  className=\"text\"\r\n                  placeholder=\"CS\"\r\n                  name=\"department\"\r\n                  value={val.department}\r\n                  onChange={setData}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"m-2 fs-5\">\r\n              <label htmlFor=\"sem\">\r\n                SEMESTER :\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"sem\"\r\n                  className=\"number\"\r\n                  placeholder=\"6\"\r\n                  name=\"semester\"\r\n                  value={val.semester}\r\n                  onChange={setData}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"m-2 fs-5\">\r\n              <label htmlFor=\"email\">\r\n                E-MAIL :\r\n                <input\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  className=\"email\"\r\n                  placeholder=\"FA19-BCS-022@cui.com\"\r\n                  name=\"email\"\r\n                  value={val.email}\r\n                  onChange={setData}\r\n                />\r\n              </label>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={updateUser}\r\n              className=\"btn btn-secondary d-grid gap-2 col-6 mx-auto\"\r\n            >\r\n              Update\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );}\r\n","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\View.js",["42","43"],[],"// THIS IS A VIEW PAGE WHICH WILL SHOW YOU ALL THE CONTENTS OF THE STUDENT YOU DESIRE TO VIEW\r\nimport React, { useEffect, useState, getUpdate } from \"react\";\r\nimport { NavLink, useParams, useNavigate } from \"react-router-dom\";\r\n\r\nexport const View = () => {\r\n  const goBack = useNavigate();\r\n\r\n  // GETTING ID FROM HOME PAGE\r\n  const { id } = useParams(\"\");\r\n\r\n  const [getUser, setUser] = useState([]);\r\n  // THIS FUNCTION WILL VALIDATE AND THEN STORE THE WHOLE DATA AGAINST THE ID IN getUser\r\n  const single = async () => {\r\n    const res = await fetch(`http://localhost:3000/view/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    // STORING THE DATA WHICH IS SENT BY THE SERVER IN JSON FORMAT IN data\r\n    const data = await res.json();\r\n    console.log(data);\r\n\r\n    if (res.status === 422 || !data) {\r\n      console.log(\"ERROR\");\r\n    } else {\r\n      // THE setUser IS THE VARIABLE DEFINED IN USESTATE TO UPDATE OR STORE THE NEW VALUE, data IS BEING TO THE setUser\r\n      setUser(data);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    single();\r\n  }, []);\r\n\r\n  // THIS FUNCTION IS BASICALLY TO DELETE THE USER\r\n  const delUser = async (id) => {\r\n    const res2 = await fetch(`http://localhost:3000/delete/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const deldata = await res2.json();\r\n    console.log(deldata);\r\n\r\n    if (res2.status === 422 || !deldata) {\r\n      alert(\"ERROR\");\r\n    } else {\r\n      alert(\"DELETED SUCCESSFULLY!\");\r\n      goBack(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavLink className=\"newUser\" to=\"/\">\r\n        <span>\r\n          <i className=\"fas fa-angle-double-left\" aria-hidden=\"true\"></i>\r\n          All Users<i className=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n        </span>\r\n      </NavLink>\r\n      <div className=\"card text-center bg-secondary mb-4\">\r\n        <div className=\"card-body\">\r\n          <h1 className=\"card-title viewH3\">{getUser.name}</h1>\r\n          <hr></hr>\r\n          <NavLink to={`/update/${getUser._id}`}>\r\n            <button type=\"button\" className=\"btn btn-dark\">\r\n              <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </NavLink>\r\n          <NavLink to=\"#\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-dark m-1\"\r\n              onClick={() => delUser(getUser._id)}\r\n            >\r\n              <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </NavLink>\r\n        </div>\r\n\r\n        <ul className=\"list-group list-group-flush mx-1 my-1\">\r\n          <li className=\"list-group-item \">\r\n            <h3 className=\"viewH3\">ID</h3>\r\n            <h4>{getUser.id}</h4>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <h3 className=\"viewH3\">DEPARTMENT</h3>\r\n            <h4>{getUser.department}</h4>\r\n          </li>\r\n          <li className=\"list-group-item \">\r\n            <h3 className=\"viewH3\">SEMESTER</h3>\r\n            <h4>{getUser.semester}</h4>\r\n          </li>\r\n          <li className=\"list-group-item \">\r\n            <h3 className=\"viewH3\">EMAIL</h3>\r\n            <h4>{getUser.email}</h4>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Head.js",[],[],"C:\\Users\\abdul\\Documents\\GitHub\\StudentManager\\server\\student\\src\\components\\Home.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":13},{"ruleId":"48","severity":1,"message":"49","line":56,"column":6,"nodeType":"50","endLine":56,"endColumn":8,"suggestions":"51"},{"ruleId":"44","severity":1,"message":"52","line":2,"column":38,"nodeType":"46","messageId":"47","endLine":2,"endColumn":47},{"ruleId":"48","severity":1,"message":"53","line":33,"column":6,"nodeType":"50","endLine":33,"endColumn":8,"suggestions":"54"},"no-unused-vars","'Axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Update'. Either include it or remove the dependency array.","ArrayExpression",["55"],"'getUpdate' is defined but never used.","React Hook useEffect has a missing dependency: 'single'. Either include it or remove the dependency array.",["56"],{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [Update]",{"range":"61","text":"62"},"Update the dependencies array to be: [single]",{"range":"63","text":"64"},[1754,1756],"[Update]",[1116,1118],"[single]"]